查看字节码文件：javap -v com.joker.jvm.bytecode.MyTest1

1. 使用javap -c / javap -verbose 命令分析一个字节码文件时，将会分析该字节码文件的魔数、版本号、常量池、类信息、
    类的构造方法、类汇总的方法信息、类变量与成员变量等信息；
2. 魔数：所有.class字节码文件的前4个字节都是魔数，魔数值为固定值：0xCAFEBABE。
3. 魔数之后4个字节为版本信息，前两个字节标识minorversion（次版本号），后两个字节标识major version（主版本号）。这里的版本号
    为00 00 00 34，换算成十进制，表示次版本号为0，主版本号为52，可以通过java -version 验证
4. 常量池（constant pool）: 紧接着主板号之后就是常量池入口。一个Java类中定义的很多信息都是由常量池来维护和描述的，可以将常量
    池看做是class文件的资源仓库，比如说Java类中定义的方法与变量信息，都是存储在常量池中。常量池汇总主要存储两类常量：字面量与
    符号引用。字面量如文本字符串，Java中声明为final的常量值等，而符号引用如类和接口的全局限定名，字段的名称和描述符，方法的名称和描述符等。
5. 常量池的总体结构：Java类所对应的常量池主要由常量池数量与常量池数组这两部分共同构成。常量池数量紧跟在主版本号后边，占两个字节；
    常量池数组则紧跟在常量池数量之后。常量池数组与一般数组不同的是，常量池数组中不同的元素的类型、结构都是不同的，长度也就不同；
    但是每一种元素的第一个数据都是一个u1类型，该字节是个标志位，占据一个字节，jvm在解析常量池时，会根据这个u1类型来获取元素的
    具体类型。注意，常量池数组中元素的个数 = 常量池数 - 1（其中0暂时不使用），目的是满足某些常量池索引值的数据在特定情况下需要
    表达【不引用任何一个常量池】的含义；根本原因在于，索引为0也是一个常量（保留常量），只不过它不位于常量表中，这个常量就对应
    null值；所以，常量池的索引从1而非0开始。
6. 在jvm规范中，每个变量/字段都有描述信息，描述信息主要的主要作用是描述字段的数据类型、方法的参数列表（包括数量、类型与顺序）与
    返回值。根据描述符会泽，基本数据类型和代表无返回值的void类型都用一个大写字符表示，对象类型则使用字符L加对象的全限定名称来表示。
    为了压缩字节码文件的体积，对于基本数据类型，JVM都只使用一个大写字母来表示，如下所示： B - byte， C - char, D -double,
    F - float, I - int, J - long, s - short, Z - boolean, V -void, L - 对象类型，如Ljava/lang/String;
7. 对于数组来说，每一个纬度使用一个前置[来表示，如int[] 被记录为[I，  String[][] 被记录为 [Ljava/lang/String;
8. 用描述符描述方法时，按照先参数列表，后返回值的顺序来描述。参数列表按照参数的严格顺序放在一组()之内，如方法：
    String getRealNameByIdAndNickName(int id, String name)的描述符为：(I,Ljava/lang/String)Ljava/lang/String
9. access flags 访问标志信息，紧跟在常量池之后，占据两个字节，该标志包括：class文件是类还是接口，是否被定义成public，是否是abstract，
    如果是类，是否被声明称final。 0x00 21:表示0x0020 和 0x0001的并集，表示ACC_PUBLIC 和 ACC_SUPER;
10. this_class 在Access Flags之后,也就是当前类的类名，占据两个字节，是引用类型，在常量池中查找，改名字是全路径限定名；
11. Super Class Name 在 this_class 之后，表示改类的父类名称，占据两个字节，也是引用类型，该名称为全路径限定名；
12. interfaces count 紧跟在super class name之后，表示该类实现的接口名称，占据两个字节，全路径的限定名；
13. fields count 域个数：在interfaces count 之后，占据两个字节，表示类中的成员变量的个数；
14. fields：字段表/成员变量表，在fields count之后，表示改类中所有的成员变量和属性的信息，由 4个U2类型和一个attribute_info_
    attributes[attributes_count] 组成；
15. methods_cout : 类中的方法数量，占据两个字节；
16. methods(方法表)：在方法数量之后，由4个u2类型和一个attribute_info组成。




